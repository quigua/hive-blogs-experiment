---
// src/pages/index.astro
import PostCard from '../components/PostCard.astro';
import '../styles/global.css';

const FUNCTIONS_BASE_URL = 'https://dreamy-baklava-d17cb6.netlify.app/.netlify/functions';
const USERNAME_TO_FETCH = 'quigua';
const POSTS_PER_PAGE = 10; // Sigue siendo la cantidad de posts por página.

// --- Carga inicial de posts (Originales) directamente desde Hive ---
let initialPosts = [];
let initialPostsNextStartAuthor = '';
let initialPostsNextStartPermlink = '';
let initialPostsHasMore = true;

const hiveNodes = [
    'https://api.hive.blog',
    'https://api.deathwing.me',
    'https://api.pharesim.me'
];

try {
    let hiveData = null;
    let fetchError = null;

    // EL LÍMITE DE LA API DE HIVE ES 20. Pedimos el máximo para tener buffer.
    const requestLimitToHive = 20; 

    for (const nodeUrl of hiveNodes) {
        try {
            const response = await fetch(nodeUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    jsonrpc: '2.0',
                    id: 1,
                    method: 'condenser_api.get_discussions_by_blog',
                    params: [{ tag: USERNAME_TO_FETCH, limit: requestLimitToHive }] 
                }),
            });
            if (response.ok) {
                hiveData = await response.json();
                if (!hiveData.error) {
                    fetchError = null; 
                    break;
                } else {
                    fetchError = new Error(`ASTRO SERVER: Error de la API de Hive en ${nodeUrl}: ${JSON.stringify(hiveData.error)}`);
                    console.error(fetchError.message);
                }
            } else {
                fetchError = new Error(`ASTRO SERVER: Error HTTP de la API de Hive en ${nodeUrl}: ${response.status} - ${await response.text()}`);
                console.error(fetchError.message);
            }
        } catch (error) {
            fetchError = new Error(`ASTRO SERVER: Error de red al conectar con ${nodeUrl}: ${error.message}`);
            console.error(error); // Log del error de red
            fetchError = new Error(`ASTRO SERVER: Error de red al conectar con ${nodeUrl}: ${error.message}`);
        }
    }

    if (hiveData && !hiveData.error && hiveData.result) {
        const allFetchedItems = hiveData.result || [];
        
        // --- FILTRADO EXCLUSIVO PARA POSTS ORIGINALES ---
        // Esto filtra solo los posts que NO tienen 'reblogged_by' o su array está vacío.
        const originalPosts = allFetchedItems.filter(post => !post.reblogged_by || post.reblogged_by.length === 0);
        
        // Seleccionamos los primeros POSTS_PER_PAGE posts originales para el display inicial.
        initialPosts = originalPosts.slice(0, POSTS_PER_PAGE); 

        // --- Determinación de la paginación ---
        // Ahora, la paginación se basa en los posts *originales* que encontramos.
        if (originalPosts.length <= POSTS_PER_PAGE || initialPosts.length < POSTS_PER_PAGE) {
            // Si el número de posts originales es menor o igual al límite, o si no pudimos llenar la primera página,
            // asumimos que no hay más posts originales para cargar.
            initialPostsHasMore = false;
        } else {
            // Si hay suficientes posts originales, el nextStart será el último de nuestro lote inicial.
            const lastItemInInitialPosts = initialPosts[initialPosts.length - 1];
            initialPostsNextStartAuthor = lastItemInInitialPosts.author;
            initialPostsNextStartPermlink = lastItemInInitialPosts.permlink;
            initialPostsHasMore = true;
        }
        
        console.log("ASTRO SERVER: Posts originales iniciales cargados:", initialPosts.length, "HasMore:", initialPostsHasMore, "Next:", initialPostsNextStartPermlink);
    } else {
        console.error("ASTRO SERVER: No se pudieron cargar los posts originales iniciales desde Hive.", fetchError);
        initialPostsHasMore = false;
    }
} catch (error) {
    console.error("ASTRO SERVER: Error general al procesar posts iniciales:", error);
    initialPostsHasMore = false;
}

---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blog de Hive de @{USERNAME_TO_FETCH}</title>
    <link rel="stylesheet" href="/styles/global.css">
    <style>
        /* Estilos básicos para el botón de cargar más */
        .load-more-container {
            text-align: center;
            margin-top: 30px;
        }
        .load-more-button {
            padding: 10px 20px;
            font-size: 1.1em;
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }
        .load-more-button:hover {
            background-color: #0056b3;
        }
        .no-more-posts-message {
            text-align: center;
            margin-top: 20px;
            color: #777;
        }
    </style>
</head>
<body>
    <button id="theme-toggle">Activar Modo Oscuro</button>
    <h1>Posts de Hive de @{USERNAME_TO_FETCH}</h1>

    <div id="posts-content" 
        data-username={USERNAME_TO_FETCH}
        data-posts-per-page={POSTS_PER_PAGE}
        data-next-start-author={initialPostsNextStartAuthor}
        data-next-start-permlink={initialPostsNextStartPermlink}
        data-has-more-posts={initialPostsHasMore}
    >
        <div class="post-list">
            {initialPosts.length === 0 ? (
                <p>No se encontraron posts originales o hubo un error al cargar.</p>
            ) : (
                initialPosts.map(post => (
                    <PostCard post={post} />
                ))
            )}
        </div>
        <div class="load-more-container">
            {initialPostsHasMore && (
                <button class="load-more-button">Cargar más posts</button>
            )}
            <p class="no-more-posts-message" style="display: {initialPostsHasMore ? 'none' : 'block'};">No hay más posts para cargar.</p>
        </div>
    </div>

    <script src="../scripts/theme.js"></script>
    <script>
        // Script de paginación simplificado para "solo posts originales"
        document.addEventListener('DOMContentLoaded', () => {
            const FUNCTIONS_BASE_URL = 'https://dreamy-baklava-d17cb6.netlify.app/.netlify/functions';
            
            const postsContentDiv = document.getElementById('posts-content');
            const postListDiv = postsContentDiv.querySelector('.post-list');
            const loadMoreButton = postsContentDiv.querySelector('.load-more-button');
            const noMoreMessage = postsContentDiv.querySelector('.no-more-posts-message');

            let nextStartAuthor = postsContentDiv.dataset.nextStartAuthor || '';
            let nextStartPermlink = postsContentDiv.dataset.nextStartPermlink || '';
            let hasMorePosts = postsContentDiv.dataset.hasMorePosts === 'true';

            // Función para renderizar los posts en el contenedor especificado.
            const renderPosts = (posts) => {
                posts.forEach(post => {
                    const postCard = document.createElement('div');
                    postCard.className = 'post-card'; 
                    postCard.innerHTML = `
                        <h3><a href="/post-detail/?author=${post.author}&permlink=${post.permlink}">${post.title}</a></h3>
                        <p>Por ${post.author} el ${new Date(post.created).toLocaleDateString()}</p>
                        <p>${post.body.substring(0, 150)}...</p>
                    `;
                    postListDiv.appendChild(postCard);
                });
            };

            const loadMoreHandler = async () => {
                if (!hasMorePosts) {
                    console.log('No hay más posts para cargar.');
                    return;
                }

                loadMoreButton.textContent = 'Cargando...';
                loadMoreButton.disabled = true;

                try {
                    const username = postsContentDiv.dataset.username;
                    const postsPerPage = parseInt(postsContentDiv.dataset.postsPerPage);

                    const url = new URL(`${FUNCTIONS_BASE_URL}/get-user-posts`);
                    url.searchParams.append('username', username);
                    url.searchParams.append('limit', postsPerPage); 
                    // No necesitamos contentType aquí si la función siempre filtra posts originales.
                    
                    if (nextStartAuthor && nextStartPermlink) {
                        url.searchParams.append('start_author', nextStartAuthor);
                        url.searchParams.append('start_permlink', nextStartPermlink);
                    }

                    const response = await fetch(url.toString());
                    const responseData = await response.json(); 

                    if (responseData.error) {
                        console.error('Error al cargar posts:', responseData.error);
                        alert(`Error al cargar posts: ${responseData.error.message || responseData.error}`);
                        hasMorePosts = false;
                    } else {
                        const newPosts = responseData.posts || []; 
                        console.log(`Cargados ${newPosts.length} nuevos posts.`);

                        renderPosts(newPosts);

                        nextStartAuthor = responseData.nextStartAuthor || '';
                        nextStartPermlink = responseData.nextStartPermlink || '';
                        hasMorePosts = responseData.hasMore;
                    }
                } catch (error) {
                    console.error('Error de red al cargar posts:', error);
                    alert('Error de red al cargar posts. Inténtelo de nuevo.');
                    hasMorePosts = false;
                } finally {
                    loadMoreButton.textContent = 'Cargar más posts';
                    loadMoreButton.disabled = false;
                    
                    if (!hasMorePosts) {
                        loadMoreButton.style.display = 'none';
                        noMoreMessage.style.display = 'block';
                    }
                }
            };

            if (loadMoreButton) {
                loadMoreButton.addEventListener('click', loadMoreHandler);
            }
        });
    </script>
</body>
</html>