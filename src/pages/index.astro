// netlify/functions/get-user-posts.js
const Redis = require('ioredis');
const fetch = require('node-fetch');

let redisClient = null;

function isOldPost(createdDate) {
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    return new Date(createdDate) < sevenDaysAgo;
}

exports.handler = async (event, context) => {
    const timeoutPromise = new Promise((resolve, reject) => {
        setTimeout(() => {
            reject(new Error('Function execution timed out before completing.'));
        }, 25000);
    });

    try {
        if (!redisClient || redisClient.status === 'end' || redisClient.status === 'wait') {
            console.log('[ioredis] Initializing or re-establishing Redis connection...');
            const redisUrl = process.env.UPSTASH_REDIS_URL;
            const redisPassword = process.env.UPSTASH_REDIS_PASSWORD;

            if (!redisUrl) {
                console.error("ERROR: UPSTASH_REDIS_URL is not configured.");
                return { statusCode: 500, body: JSON.stringify({ error: 'Missing Redis URL configuration.' }) };
            }
            if (!redisPassword) {
                console.error("ERROR: UPSTASH_REDIS_PASSWORD is not configured.");
                return { statusCode: 500, body: JSON.stringify({ error: 'Missing Redis Password configuration.' }) };
            }

            redisClient = new Redis(redisUrl, { password: redisPassword, tls: {} });

            if (!redisClient.__listenersAttached) {
                redisClient.on('error', (err) => console.error('[ioredis] Connection or operation error:', err.message, err.code, err.address));
                redisClient.on('connect', () => console.log('[ioredis] Connected to Redis!'));
                redisClient.on('reconnecting', () => console.warn('[ioredis] Reconnecting to Redis...'));
                redisClient.on('end', () => { console.warn('[ioredis] Redis connection terminated. Resetting client.'); redisClient = null; });
                redisClient.__listenersAttached = true;
            }
        }

        const { username, limit, start_author, start_permlink } = event.queryStringParameters;
        const parsedLimit = parseInt(limit) || 10; // Usar 10 por defecto para evitar errores

        if (!username) {
            return { statusCode: 400, body: JSON.stringify({ error: 'Missing parameter: username.' }) };
        }

        const hiveNodes = [
            'https://api.hive.blog',
            'https://api.deathwing.me',
            'https://api.pharesim.me'
        ];

        // La clave de caché incluirá "_DEBUG" para que no interfiera con cachés anteriores.
        const cacheKey = `hive:debug:${username}:${parsedLimit}:${start_author || 'null'}:${start_permlink || 'null'}`;

        let cachedResponse = null;
        try {
            cachedResponse = await Promise.race([redisClient.get(cacheKey), timeoutPromise]);
        } catch (redisErr) {
            console.error(`Error trying to get from Redis for ${cacheKey}:`, redisErr);
        }

        if (cachedResponse) {
            console.log(`DEBUG CACHE: Cache HIT for key: ${cacheKey}`);
            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json' },
                body: cachedResponse,
            };
        }
        console.log(`DEBUG CACHE: Cache MISS for key: ${cacheKey}. Fetching RAW data from Hive.`);

        const postsToFetch = 20; // Siempre pedir 20 posts brutos para inspección

        const body = {
            jsonrpc: '2.0',
            id: 1,
            method: 'condenser_api.get_discussions_by_blog',
            params: [{
                tag: username,
                limit: postsToFetch,
                start_author: start_author || undefined,
                start_permlink: start_permlink || undefined,
            }],
        };

        let hiveResponse;
        let hiveError = null;

        for (const nodeUrl of hiveNodes) {
            console.log(`DEBUG FETCH: Attempting fetch with Hive node: ${nodeUrl}`);
            try {
                hiveResponse = await Promise.race([
                    fetch(nodeUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(body),
                    }),
                    timeoutPromise
                ]);

                if (hiveResponse.ok) {
                    hiveError = null;
                    break;
                } else {
                    const errorText = await hiveResponse.text();
                    hiveError = new Error(`Hive API error at ${nodeUrl}: ${hiveResponse.status} - ${errorText}`);
                    console.error(hiveError.message);
                }
            } catch (error) {
                hiveError = new Error(`Network error connecting to ${nodeUrl}: ${error.message}`);
                console.error(error.message);
            }
        }

        if (!hiveResponse || !hiveResponse.ok) {
            console.error("DEBUG FETCH: Failed to fetch from any Hive node.");
            throw hiveError || new Error('Could not connect to any Hive node.');
        }

        const hiveData = await hiveResponse.json();

        if (hiveData.error) {
            console.error('DEBUG HIVE ERROR:', hiveData.error);
            return { statusCode: 500, body: JSON.stringify({ error: 'Hive API error', details: hiveData.error }) };
        }

        const rawPostsFromHive = hiveData.result || [];
        console.log(`DEBUG RAW DATA: Fetched ${rawPostsFromHive.length} raw posts from Hive for @${username}.`);
        console.log('DEBUG RAW DATA SAMPLE (First 5):', JSON.stringify(rawPostsFromHive.slice(0, 5), null, 2));

        // Determinar la paginación para el siguiente paso
        let nextClientStartAuthor = null;
        let nextClientStartPermlink = null;
        let hasMore = false;

        if (rawPostsFromHive.length === postsToFetch) { // Si obtuvimos un lote completo, podría haber más.
            const lastItem = rawPostsFromHive[rawPostsFromHive.length - 1];
            nextClientStartAuthor = lastItem.author;
            nextClientStartPermlink = lastItem.permlink;
            hasMore = true;
        }

        const responseData = {
            // Devolvemos los posts crudos aquí para inspección.
            posts: rawPostsFromHive, 
            nextStartAuthor: nextClientStartAuthor,
            nextStartPermlink: nextClientStartPermlink,
            hasMore: hasMore,
            // Agregamos una bandera para indicar que estamos en modo debug
            debugMode: true, 
            originalLimitRequested: parsedLimit,
            actualPostsReturned: rawPostsFromHive.length
        };

        // Cachear la respuesta DEBUG (por menos tiempo, quizás 5 minutos para que la depuración sea rápida)
        try {
            await Promise.race([redisClient.set(cacheKey, JSON.stringify(responseData), 'EX', 60 * 5), timeoutPromise]); // 5 minutos de caché
            console.log(`DEBUG CACHE: Cache SET for key: ${cacheKey} (DEBUG mode, duration: 5 min).`);
        } catch (redisErr) {
            console.error(`DEBUG CACHE: Error trying to save to Redis ${cacheKey}:`, redisErr);
        }

        return {
            statusCode: 200,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(responseData),
        };

    } catch (error) {
        console.error('DEBUG FUNCTION ERROR (caught):', error.message, error.stack);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Internal server error in debug mode', details: error.message }),
        };
    } finally {
        // No llamamos a redisClient.quit() aquí.
    }
};