---
// src/pages/index.astro
import PostCard from '../components/PostCard.astro';
import '../styles/global.css'; // Asegúrate de que esta línea esté aquí

// ... (tu lógica de fetch en el frontmatter permanece igual) ...

let initialPosts = [];
let hasMorePosts = false;
let nextStartAuthor = null;
let nextStartPermlink = null;

try {
    const response = await fetch(`${FUNCTIONS_BASE_URL}/get-user-posts?username=${USERNAME_TO_FETCH}&limit=${POSTS_PER_PAGE}`);
    const data = await response.json();

    if (data.error) {
        console.error("Error al cargar posts iniciales (server-side):", data.error, data.details);
    } else {
        initialPosts = data.posts;
        hasMorePosts = data.hasMore;
        nextStartAuthor = data.nextPage?.startAuthor || null;
        nextStartPermlink = data.nextPage?.permlink || null;
        console.log("Posts iniciales cargados (server-side):", initialPosts.length, "Has more:", hasMorePosts);
        console.log("Next page info (server-side):", nextStartAuthor, nextStartPermlink);
    }
} catch (error) {
    console.error("Error al conectar con la función Netlify para posts iniciales (server-side):", error);
}
---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Blog de Hive - Astro</title>
</head>
<body>
    <button id="theme-toggle">Activar Modo Oscuro</button>

    <h1>Posts de Hive de @{USERNAME_TO_FETCH}</h1>

    <div
        id="posts-list"
        data-initial-has-more={hasMorePosts}
        data-initial-start-author={nextStartAuthor}
        data-initial-start-permlink={nextStartPermlink}
    >
        <h2>Últimos Posts</h2>
        <div class="post-list">
            {initialPosts.length === 0 ? (
                <p>No se encontraron posts o hubo un error al cargar.</p>
            ) : (
                initialPosts.map(post => (
                    <PostCard post={post} />
                ))
            )}
        </div>

        {hasMorePosts && <button id="load-more-button" class="load-more-button">Cargar más</button>}
    </div>

    <script is:inline>
        const themeToggle = document.getElementById('theme-toggle');
        const body = document.body;

        function applyTheme(theme) {
            if (theme === 'dark') {
                body.classList.add('dark-mode');
                themeToggle.textContent = 'Activar Modo Claro';
            } else {
                body.classList.remove('dark-mode');
                themeToggle.textContent = 'Activar Modo Oscuro';
            }
        }

        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            applyTheme(savedTheme);
        } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            applyTheme('dark');
        } else {
            applyTheme('light');
        }

        themeToggle.addEventListener('click', () => {
            if (body.classList.contains('dark-mode')) {
                applyTheme('light');
                localStorage.setItem('theme', 'light');
            } else {
                applyTheme('dark');
                localStorage.setItem('theme', 'dark');
            }
        });
    </script>

    <script is:inline>
        const FUNCTIONS_BASE_URL_CLIENT = 'https://dreamy-baklava-d17cb6.netlify.app/.netlify/functions';
        const USERNAME_TO_FETCH_CLIENT = 'quigua';
        const POSTS_PER_PAGE_CLIENT = 20;

        // NUEVA FORMA DE OBTENER EL ESTADO INICIAL
        const postsListDiv = document.getElementById('posts-list');
        window.paginationState = {
            currentStartAuthor: postsListDiv.dataset.initialStartAuthor === 'null' ? null : postsListDiv.dataset.initialStartAuthor,
            currentStartPermlink: postsListDiv.dataset.initialStartPermlink === 'null' ? null : postsListDiv.dataset.initialStartPermlink,
            hasMorePosts: postsListDiv.dataset.initialHasMore === 'true' // Convierte a booleano
        };

        const postsContainerClient = postsListDiv.querySelector('.post-list'); // Apunta al div con PostCard
        const loadMoreButtonClient = document.getElementById('load-more-button');

        // Función para cargar más posts desde el cliente
        async function fetchMorePosts() {
            loadMoreButtonClient.textContent = 'Cargando...';
            loadMoreButtonClient.disabled = true;

            const { currentStartAuthor, currentStartPermlink } = window.paginationState;

            let url = `${FUNCTIONS_BASE_URL_CLIENT}/get-user-posts?username=${USERNAME_TO_FETCH_CLIENT}&limit=${POSTS_PER_PAGE_CLIENT}`;
            if (currentStartAuthor && currentStartPermlink) {
                url += `&startAuthor=${currentStartAuthor}&startPermlink=${currentStartPermlink}`;
            }

            try {
                console.log("Intentando fetch de más posts desde el cliente:", url);
                const response = await fetch(url);
                const data = await response.json();
                console.log("Respuesta de fetch (cliente):", data);

                if (data.error) {
                    console.error("Error al cargar más posts (client-side):", data.error, data.details);
                    // No añades <li> al postsContainerClient directamente porque PostCard ya los genera.
                    // Si quieres mostrar un mensaje de error, hazlo fuera del loop o crea un nuevo PostCard de error.
                    loadMoreButtonClient.textContent = 'Error al cargar';
                    loadMoreButtonClient.disabled = false;
                    return;
                }

                if (data.posts.length === 0) {
                    loadMoreButtonClient.style.display = 'none';
                    // Aquí podrías añadir un mensaje si no hay más posts
                    const noMoreMessage = document.createElement('p');
                    noMoreMessage.textContent = 'No hay más posts para cargar.';
                    postsListDiv.appendChild(noMoreMessage); // Añadirlo al div principal
                    return;
                }

                // Renderiza los nuevos posts usando PostCard (esto lo hace Astro en el servidor)
                // Para añadir nuevos posts desde el cliente sin recargar, DEBES recrear la estructura de PostCard
                // en JavaScript o bien usar un enfoque que permita a Astro "hidratar" los nuevos componentes.
                // Por ahora, para simplemente LISTAR, podríamos volver a la estructura simple de <li> si esto es muy complejo.
                // Si quieres que los nuevos posts también tengan los estilos de PostCard, tendrías que recrear
                // la estructura HTML exacta que PostCard.astro genera.
                // Por ahora, los estamos pegando como texto simple, lo que no aplicará estilos complejos de PostCard.

                // OJO: Esta parte `data.posts.forEach(post => { ... li.appendChild(a); ...})` está replicando
                // la vieja estructura de la <ul>. Si quieres que los posts cargados dinámicamente
                // se vean como PostCard, NO PUEDES usar document.createElement('li').
                // Para solucionar esto, tendrías que:
                // 1. O bien usar un framework de JS (React/Vue/Svelte) con directivas client: de Astro
                // 2. O bien que tu función de Netlify devuelva el HTML ya renderizado de PostCard para cada post
                //    (lo cual añade complejidad al backend)
                // 3. O bien renderizar los nuevos posts con un formato HTML más simple que luego puedas estilizar.

                // Por el momento, para que al menos se vean los posts nuevos, mantenemos tu lógica actual
                // que solo crea un <li> simple. Ten en cuenta que NO tendrán el estilo de PostCard.
                // La solución ideal sería que PostCard fuera un componente con una directiva client:load
                // si quisieras que Astro se encargara de hidratar los nuevos posts.

                const tempDiv = document.createElement('div'); // Crea un div temporal para contener los nuevos PostCard
                data.posts.forEach(post => {
                    // Esto es una simplificación. En un escenario de Astro híbrido,
                    // idealmente querrías que Astro renderice PostCard por ti.
                    // Aquí, estamos construyendo una tarjeta simple para que al menos se vea.
                    const newPostHTML = `
                        <div class="post-card">
                            <a href="/post-detail?author=${post.author}&permlink=${post.permlink}" class="post-title">
                                ${post.title}
                            </a>
                            <p class="post-meta">Publicado por ${post.author} el ${new Date(post.created).toLocaleDateString()}</p>
                        </div>
                    `;
                    tempDiv.innerHTML += newPostHTML;
                });
                postsContainerClient.appendChild(tempDiv);


                window.paginationState.hasMorePosts = data.hasMore;
                if (data.hasMore) {
                    window.paginationState.currentStartAuthor = data.nextPage.startAuthor;
                    window.paginationState.currentStartPermlink = data.nextPage.permlink;
                    loadMoreButtonClient.textContent = 'Cargar más';
                    loadMoreButtonClient.disabled = false;
                } else {
                    loadMoreButtonClient.style.display = 'none';
                    const noMoreMessage = document.createElement('p');
                    noMoreMessage.textContent = 'Todos los posts han sido cargados.';
                    postsListDiv.appendChild(noMoreMessage);
                }

            } catch (error) {
                console.error("Error fetching more posts (client-side):", error);
                //postsContainerClient.innerHTML += `<li>Error de conexión al cargar más posts: ${error.message}</li>`;
                loadMoreButtonClient.textContent = 'Error de conexión';
                loadMoreButtonClient.disabled = false;
            }
        }

        // Asignar el event listener al botón "Cargar más"
        document.addEventListener('DOMContentLoaded', () => {
            if (loadMoreButtonClient) {
                if (!window.paginationState.hasMorePosts) {
                    loadMoreButtonClient.style.display = 'none';
                }
                loadMoreButtonClient.addEventListener('click', fetchMorePosts);
            }
        });
    </script>
</body>
</html>