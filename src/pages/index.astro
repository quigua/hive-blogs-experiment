---
// src/pages/index.astro
import PostCard from '../components/PostCard.astro';
const FUNCTIONS_BASE_URL = 'https://dreamy-baklava-d17cb6.netlify.app/.netlify/functions';
const USERNAME_TO_FETCH = 'quigua';
const POSTS_PER_PAGE = 20;

let initialPosts = [];
let hasMorePosts = false;
let nextStartAuthor = null;
let nextStartPermlink = null;

try {
    const response = await fetch(`${FUNCTIONS_BASE_URL}/get-user-posts?username=${USERNAME_TO_FETCH}&limit=${POSTS_PER_PAGE}`);  
    const data = await response.json();

    if (data.error) {
        console.error("Error al cargar posts iniciales (server-side):", data.error, data.details);
    } else {
        initialPosts = data.posts;
        hasMorePosts = data.hasMore;
        nextStartAuthor = data.nextPage?.startAuthor || null;
        // *** CORRECCIÓN CRÍTICA AQUÍ: nextStartPermlink debería ser data.nextPage?.permlink ***
        nextStartPermlink = data.nextPage?.permlink || null;
        console.log("Posts iniciales cargados (server-side):", initialPosts.length, "Has more:", hasMorePosts);
        console.log("Next page info (server-side):", nextStartAuthor, nextStartPermlink);
    }
} catch (error) {
    console.error("Error al conectar con la función Netlify para posts iniciales (server-side):", error);
}
---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Blog de Hive - Astro</title>
    <link rel="stylesheet" href="/styles/global.css">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    
</head>
<body>
    <button id="theme-toggle">Activar Modo Oscuro</button>

    <h1>Posts de Hive de @{USERNAME_TO_FETCH}</h1>

    <div id="posts-list">
        <h2>Últimos Posts</h2>
        <ul id="posts-container">
            {initialPosts.length === 0 ? (
                <li>No se encontraron posts o hubo un error al cargar.</li>
            ) : (
                initialPosts.map(post => (
                    <li>
                        
                        <a href={`/post-detail?author=${post.author}&permlink=${post.permlink}`} class="post-title">
                            {post.title}
                        </a>
                        <p class="post-meta">Publicado por {post.author} el {new Date(post.created).toLocaleDateString()}</p>
                    </li>
                ))
            )}
        </ul>
        {hasMorePosts && <button id="load-more-button" class="load-more-button">Cargar más</button>}
    </div>
    <script is:inline>
    const themeToggle = document.getElementById('theme-toggle');
    const body = document.body;

    // Función para aplicar el tema
    function applyTheme(theme) {
        if (theme === 'dark') {
            body.classList.add('dark-mode');
            themeToggle.textContent = 'Activar Modo Claro';
        } else {
            body.classList.remove('dark-mode');
            themeToggle.textContent = 'Activar Modo Oscuro';
        }
    }

    // 1. Cargar el tema guardado o detectar la preferencia del sistema
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
        applyTheme(savedTheme);
    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        // Si no hay tema guardado, detecta la preferencia del sistema operativo
        applyTheme('dark');
    } else {
        // Por defecto, aplica el tema claro
        applyTheme('light');
    }

    // 2. Escuchar clics en el botón
    themeToggle.addEventListener('click', () => {
        if (body.classList.contains('dark-mode')) {
            applyTheme('light');
            localStorage.setItem('theme', 'light');
        } else {
            applyTheme('dark');
            localStorage.setItem('theme', 'dark');
        }
    });
</script>

    <script is:inline>
    const FUNCTIONS_BASE_URL_CLIENT = 'https://dreamy-baklava-d17cb6.netlify.app/.netlify/functions';
    const USERNAME_TO_FETCH_CLIENT = 'quigua';
    const POSTS_PER_PAGE_CLIENT = 20;

    // Inyectamos las variables desde el frontmatter directamente en el script
    // Usamos una variable global para el state de paginación para facilitar el acceso
    window.paginationState = {
        currentStartAuthor: {JSON.stringify(nextStartAuthor)},
        currentStartPermlink: {JSON.stringify(nextStartPermlink)},
        hasMorePosts: {JSON.stringify(hasMorePosts)}
    };

    const postsContainerClient = document.getElementById('posts-container');
    const loadMoreButtonClient = document.getElementById('load-more-button');

    // Función para cargar más posts desde el cliente
    async function fetchMorePosts() {
        loadMoreButtonClient.textContent = 'Cargando...';
        loadMoreButtonClient.disabled = true;

        const { currentStartAuthor, currentStartPermlink } = window.paginationState;

        let url = `${FUNCTIONS_BASE_URL}/get-user-posts?username=${USERNAME_TO_FETCH}&limit=${POSTS_PER_PAGE}`;
        if (currentStartAuthor && currentStartPermlink) {
            url += `&startAuthor=${currentStartAuthor}&startPermlink=${currentStartPermlink}`;
        }

        try {
            console.log("Intentando fetch de más posts desde el cliente:", url); // LOG CLAVE
            const response = await fetch(url);
            const data = await response.json();
            console.log("Respuesta de fetch (cliente):", data); // LOG CLAVE

            if (data.error) {
                console.error("Error al cargar más posts (client-side):", data.error, data.details);
                postsContainerClient.innerHTML += `<li>Error al cargar más posts: ${data.error}</li>`;
                loadMoreButtonClient.textContent = 'Error al cargar';
                loadMoreButtonClient.disabled = false;
                return;
            }

            if (data.posts.length === 0) {
                loadMoreButtonClient.style.display = 'none';
                postsContainerClient.innerHTML += '<li>No hay más posts para cargar.</li>';
                return;
            }

            data.posts.forEach(post => {
                const li = document.createElement('li');
                const a = document.createElement('a');
                a.href = `/post-detail?author=${post.author}&permlink=${post.permlink}`;
                a.className = 'post-title';
                a.textContent = post.title;

                const meta = document.createElement('p');
                meta.className = 'post-meta';
                meta.textContent = `Publicado por ${post.author} el ${new Date(post.created).toLocaleDateString()}`;

                li.appendChild(a);
                li.appendChild(meta);
                postsContainerClient.appendChild(li);
            });

            window.paginationState.hasMorePosts = data.hasMore;
            if (data.hasMore) {
                window.paginationState.currentStartAuthor = data.nextPage.startAuthor;
                // *** CORRECCIÓN CRÍTICA AQUÍ: data.nextPage.permlink ***
                window.paginationState.currentStartPermlink = data.nextPage.permlink;
                loadMoreButtonClient.textContent = 'Cargar más';
                loadMoreButtonClient.disabled = false;
            } else {
                loadMoreButtonClient.style.display = 'none';
                postsContainerClient.innerHTML += '<li>Todos los posts han sido cargados.</li>';
            }

        } catch (error) {
            console.error("Error fetching more posts (client-side):", error);
            postsContainerClient.innerHTML += `<li>Error de conexión al cargar más posts: ${error.message}</li>`;
            loadMoreButtonClient.textContent = 'Error de conexión';
            loadMoreButtonClient.disabled = false;
        }
    }

    // Asignar el event listener al botón "Cargar más"
    // Y ocultarlo si no hay más posts desde la carga inicial del servidor
    document.addEventListener('DOMContentLoaded', () => {
        if (loadMoreButtonClient) {
            if (!window.paginationState.hasMorePosts) {
                loadMoreButtonClient.style.display = 'none';
            }
            loadMoreButtonClient.addEventListener('click', fetchMorePosts);
        }
    });
</script>
</body>
</html>
    </script>
</body>
</html>