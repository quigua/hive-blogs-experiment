---
// src/pages/index.astro
import PostCard from '../components/PostCard.astro';
import '../styles/global.css';

const FUNCTIONS_BASE_URL = 'https://dreamy-baklava-d17cb6.netlify.app/.netlify/functions';
const USERNAME_TO_FETCH = 'quigua';
const POSTS_PER_PAGE = 10;

// --- Carga inicial de posts (Originales) directamente desde Hive para mayor fiabilidad en el build ---
let initialPosts = [];
let initialPostsNextStartAuthor = '';
let initialPostsNextStartPermlink = '';
let initialPostsHasMore = true;

const hiveNodes = [
    'https://api.hive.blog',
    'https://api.deathwing.me',
    'https://api.pharesim.me'
];

try {
    let hiveData = null;
    let fetchError = null;

    // EL CAMBIO CLAVE: Aseguramos que el límite de solicitud a Hive es 20.
    const requestLimitToHive = 20; 

    for (const nodeUrl of hiveNodes) {
        try {
            const response = await fetch(nodeUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    jsonrpc: '2.0',
                    id: 1,
                    method: 'condenser_api.get_discussions_by_blog',
                    params: [{ tag: USERNAME_TO_FETCH, limit: requestLimitToHive }] 
                }),
            });
            if (response.ok) {
                hiveData = await response.json();
                if (!hiveData.error) {
                    fetchError = null; 
                    break;
                } else {
                    fetchError = new Error(`ASTRO SERVER: Error de la API de Hive en ${nodeUrl}: ${JSON.stringify(hiveData.error)}`);
                    console.error(fetchError.message);
                }
            } else {
                fetchError = new Error(`ASTRO SERVER: Error HTTP de la API de Hive en ${nodeUrl}: ${response.status} - ${await response.text()}`);
                console.error(fetchError.message);
            }
        } catch (error) {
            fetchError = new Error(`ASTRO SERVER: Error de red al conectar con ${nodeUrl}: ${error.message}`);
            console.error(fetchError.message);
        }
    }

    if (hiveData && !hiveData.error && hiveData.result) {
        const allFetchedItems = hiveData.result || [];
        // Filtramos para posts originales
        const typeFilteredItems = allFetchedItems.filter(post => !post.reblogged_by || post.reblogged_by.length === 0);
        
        // Seleccionamos los primeros 10 posts
        initialPosts = typeFilteredItems.slice(0, POSTS_PER_PAGE); 

        // Determinamos la paginación para la *próxima* llamada, usando la lista original de Hive.
        if (initialPosts.length < POSTS_PER_PAGE) {
            initialPostsHasMore = false;
        } else {
            const lastItemInCurrentBatch = initialPosts[initialPosts.length - 1];
            // Encontrar el índice del último post *mostrado* en el array *completo sin filtrar* de Hive.
            const indexOfLastItemInOriginal = allFetchedItems.findIndex(item => 
                item.author === lastItemInCurrentBatch.author && 
                item.permlink === lastItemInCurrentBatch.permlink
            );

            // Si se encontró el post y hay un siguiente post en la lista original de Hive, ese es nuestro punto de inicio.
            if (indexOfLastItemInOriginal !== -1 && (indexOfLastItemInOriginal + 1) < allFetchedItems.length) {
                const nextItemFromOriginal = allFetchedItems[indexOfLastItemInOriginal + 1];
                initialPostsNextStartAuthor = nextItemFromOriginal.author;
                initialPostsNextStartPermlink = nextItemFromOriginal.permlink;
            } else {
                initialPostsHasMore = false;
            }
        }
        console.log("ASTRO SERVER: Posts originales iniciales cargados:", initialPosts.length, "HasMore:", initialPostsHasMore, "Next:", initialPostsNextStartPermlink);
    } else {
        console.error("ASTRO SERVER: No se pudieron cargar los posts originales iniciales desde Hive.", fetchError);
        initialPostsHasMore = false;
    }
} catch (error) {
    console.error("ASTRO SERVER: Error general al procesar posts iniciales:", error);
    initialPostsHasMore = false;
}

// Para los reblogs, no los cargaremos inicialmente en el servidor.
// Su estado inicial indica que no se han cargado y que hay potencial para más.
let initialReblogs = []; 
let initialReblogsNextStartAuthor = '';
let initialReblogsNextStartPermlink = '';
let initialReblogsHasMore = true; 

---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Blog de Hive - Astro</title>
    <style>
        /* Estilos básicos para las pestañas */
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid #ccc;
        }
        .tab-button {
            padding: 10px 15px;
            cursor: pointer;
            border: none;
            background-color: transparent;
            font-size: 1em;
            color: #555;
            transition: all 0.3s ease;
        }
        .tab-button.active {
            border-bottom: 2px solid #007bff;
            color: #007bff;
            font-weight: bold;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <button id="theme-toggle">Activar Modo Oscuro</button>
    <h1>Posts de Hive de @{USERNAME_TO_FETCH}</h1>

    <div class="tabs">
        <button class="tab-button active" data-tab="posts">Posts Originales</button>
        <button class="tab-button" data-tab="reblogs">Reblogs</button>
    </div>

    <div id="posts-tab-content" class="tab-content active"
        data-content-type="posts"
        data-username={USERNAME_TO_FETCH}
        data-posts-per-page={POSTS_PER_PAGE}
        data-next-start-author={initialPostsNextStartAuthor}
        data-next-start-permlink={initialPostsNextStartPermlink}
        data-has-more-posts={initialPosts