---
// src/pages/index.astro
import PostCard from '../components/PostCard.astro';
import '../styles/global.css';

const FUNCTIONS_BASE_URL = 'https://dreamy-baklava-d17cb6.netlify.app/.netlify/functions';
const USERNAME_TO_FETCH = 'quigua';
const POSTS_PER_PAGE = 10;

// --- Carga inicial de posts (Originales) directamente desde Hive para mayor fiabilidad en el build ---
let initialPosts = [];
let initialPostsNextStartAuthor = '';
let initialPostsNextStartPermlink = '';
let initialPostsHasMore = true;

const hiveNodes = [
    'https://api.hive.blog',
    'https://api.deathwing.me',
    'https://api.pharesim.me'
];

try {
    let hiveData = null;
    let fetchError = null;

    // EL CAMBIO CLAVE: Aseguramos que el límite de solicitud a Hive es 20.
    const requestLimitToHive = 20; 

    for (const nodeUrl of hiveNodes) {
        try {
            const response = await fetch(nodeUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    jsonrpc: '2.0',
                    id: 1,
                    method: 'condenser_api.get_discussions_by_blog',
                    params: [{ tag: USERNAME_TO_FETCH, limit: requestLimitToHive }] 
                }),
            });
            if (response.ok) {
                hiveData = await response.json();
                if (!hiveData.error) {
                    fetchError = null; 
                    break;
                } else {
                    fetchError = new Error(`ASTRO SERVER: Error de la API de Hive en ${nodeUrl}: ${JSON.stringify(hiveData.error)}`);
                    console.error(fetchError.message);
                }
            } else {
                fetchError = new Error(`ASTRO SERVER: Error HTTP de la API de Hive en ${nodeUrl}: ${response.status} - ${await response.text()}`);
                console.error(fetchError.message);
            }
        } catch (error) {
            fetchError = new Error(`ASTRO SERVER: Error de red al conectar con ${nodeUrl}: ${error.message}`);
            console.error(fetchError.message);
        }
    }

    if (hiveData && !hiveData.error && hiveData.result) {
        const allFetchedItems = hiveData.result || [];
        
        // --- FILTRADO DE POSTS ORIGINALES PARA EL LOTE INICIAL ---
        const typeFilteredItems = allFetchedItems.filter(post => !post.reblogged_by || post.reblogged_by.length === 0);
        
        // Seleccionamos los primeros 10 posts originales
        initialPosts = typeFilteredItems.slice(0, POSTS_PER_PAGE); 

        // --- DETERMINACIÓN DE LA PRÓXIMA PÁGINA BASADA EN EL FEED COMPLETO DE HIVE ---
        // La paginación siempre se basa en el feed completo de Hive.
        if (allFetchedItems.length < requestLimitToHive || allFetchedItems.length === 0) {
            initialPostsHasMore = false;
        } else {
            // El nextStart es el último elemento de la respuesta completa de Hive.
            const lastItem = allFetchedItems[allFetchedItems.length - 1];
            initialPostsNextStartAuthor = lastItem.author;
            initialPostsNextStartPermlink = lastItem.permlink;
            initialPostsHasMore = true; // Asumimos que hay más si Hive nos dio un lote completo.
        }
        
        console.log("ASTRO SERVER: Posts originales iniciales cargados:", initialPosts.length, "HasMore:", initialPostsHasMore, "Next:", initialPostsNextStartPermlink);
    } else {
        console.error("ASTRO SERVER: No se pudieron cargar los posts originales iniciales desde Hive.", fetchError);
        initialPostsHasMore = false;
    }
} catch (error) {
    console.error("ASTRO SERVER: Error general al procesar posts iniciales:", error);
    initialPostsHasMore = false;
}

// Para los reblogs, no los cargaremos inicialmente en el servidor.
// Su estado inicial indica que no se han cargado y que hay potencial para más.
let initialReblogs = []; 
let initialReblogsNextStartAuthor = '';
let initialReblogsNextStartPermlink = '';
let initialReblogsHasMore = true; 

---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Blog de Hive - Astro</title>
    <style>
        /* Estilos básicos para las pestañas */
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid #ccc;
        }
        .tab-button {
            padding: 10px 15px;
            cursor: pointer;
            border: none;
            background-color: transparent;
            font-size: 1em;
            color: #555;
            transition: all 0.3s ease;
        }
        .tab-button.active {
            border-bottom: 2px solid #007bff;
            color: #007bff;
            font-weight: bold;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <button id="theme-toggle">Activar Modo Oscuro</button>
    <h1>Posts de Hive de @{USERNAME_TO_FETCH}</h1>

    <div class="tabs">
        <button class="tab-button active" data-tab="posts">Posts Originales</button>
        <button class="tab-button" data-tab="reblogs">Reblogs</button>
    </div>

    <div id="posts-tab-content" class="tab-content active"
        data-content-type="posts"
        data-username={USERNAME_TO_FETCH}
        data-posts-per-page={POSTS_PER_PAGE}
        data-next-start-author={initialPostsNextStartAuthor}
        data-next-start-permlink={initialPostsNextStartPermlink}
        data-has-more-posts={initialPostsHasMore}
    >
        <div class="post-list">
            {initialPosts.length === 0 ? (
                <p>No se encontraron posts originales o hubo un error al cargar.</p>
            ) : (
                initialPosts.map(post => (
                    <PostCard post={post} />
                ))
            )}
        </div>
        {initialPostsHasMore && (
            <button class="load-more-button">Cargar más posts</button>
        )}
        <p class="no-more-posts-message" style="display: {initialPostsHasMore ? 'none' : 'block'};">No hay más posts para cargar.</p>
    </div>

    <div id="reblogs-tab-content" class="tab-content"
        data-content-type="reblogs"
        data-username={USERNAME_TO_FETCH}
        data-posts-per-page={POSTS_PER_PAGE}
        data-next-start-author="" 
        data-next-start-permlink="" 
        data-has-more-posts="true"
    >
        <div class="post-list">
            <p>Haz clic en "Cargar más reblogs" para ver el contenido.</p>
        </div>
        <button class="load-more-button">Cargar más reblogs</button>
        <p class="no-more-posts-message" style="display: none;">No hay más reblogs para cargar.</p>
    </div>

    <script src="../scripts/theme.js"></script>
    <script src="../scripts/pagination.js"></script>
</body>
</html>